LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

ENTITY mem_ast_3_50 IS
	GENERIC (	DATA_WIDTH	:	INTEGER:=100;
					ADDR_WIDTH	:	INTEGER:=6);
	PORT (	clk		:	IN  STD_LOGIC;
				addr		:	IN  STD_LOGIC_VECTOR(ADDR_WIDTH-1 DOWNTO 0);
				r_data	:	OUT STD_LOGIC_VECTOR(DATA_WIDTH-1 DOWNTO 0));
END ENTITY;
-----------------------------------
ARCHITECTURE funtional OF mem_ast_3_50 IS
----------------------------------- Build of memory
	TYPE mem_2d_type IS ARRAY (0 TO 2**ADDR_WIDTH-1) OF STD_LOGIC_VECTOR(DATA_WIDTH-1 DOWNTO 0);
	SIGNAL ram	:	mem_2d_type;
	SIGNAL data_reg	:	STD_LOGIC_VECTOR(DATA_WIDTH-1 DOWNTO 0);
----------------------------------- Contents
	CONSTANT DATA_ROM: mem_2d_type:=("0000000000000000000000000000000000000010101010101010100000000000000000000000000000000000000000000000",
												"0000000000000000000000000000000000001010101010101010101001000000000000000000000000000000000000000000",
												"0000000000000000000000000000000000101010101010101010101010100000000000000000000000000000000000000000",
												"0000000000000000000000000000000000101010101010101010101010101000000000000000000000000000000000000000",
												"0000000000000000000000000000000000101010101010101010101010101000000000000000000000000000000000000000",
												"0000000000000000000000000000000010101010101010101010101010101000000000000000000000000000000000000000",
												"0000000000000000000000000000000010101010101010101010101010101010000000000000000000000000000000000000",
												"0000000000000000000000000000000010101010101010101010101010101010100000000000000000000000000000000000",
												"0000000000000000000000000000000010101010101010101010101010101010100000000000000000000000000000000000",
												"0000000000000000000000000000000010101010101010101010101010101010101001000000000000000000000000000000",
												"0000000000000000000000000000000010101010101010101010101010101010101010100000000000000000000000000000",
												"0000000000000000000000000000000010101010101010101010101010101010101010101010100000000000000000000000",
												"0000000000000000000000000000001010101010101010101010100110101010101010101010101010000000000000000000",
												"0000000000000000000000000000001010101010101010101010100101010110101010101010101010101010000000000000",
												"0000000000000000000000000000001010101010101010101010100111111101010110101010101010101010100000000000",
												"0000000000000000000000000000101010101010101010101010100111111111110110101010101010101010101000000000",
												"0000000000000000000000001010101010101010101010101010100111111111110110101010101010101010101010000000",
												"0000000000000000000000101010101010101010101010101010100111111111111101011010101010101010101010100000",
												"0000000000000000000110101010101010101010101010101010101001111111111111010110101010101010101010101000",
												"0000000000000000101010101010101010101010101010101010101001111111111111110101101010101010101010101000",
												"0000000000000110101010101010101010101010101010101010101010000100011111110101101010101010101010101010",
												"0000000000011010101010101010010101010101010110101010101010101010011111110101101010101010101010101001",
												"0000000000101010101010100101111111111111111101101010101010101010011111110110101010101010101010101000",
												"0000000010101010101010100101111111111111110101101010101010101010011111011010101010101010101010100000",
												"0000101010101010101010100101111111111111010110101010101010101010110101101010101010101010101000000000",
												"0000101010101010101010101001111111111111011010101010101010101010101010101010101010101010100000000000",
												"0010101010101010101010101001111111111111011010101010101010101010010101101010101010101010000000000000",
												"1010101010101010101010101000111111111101011010101010101010100101101111011010101010101000000000000000",
												"1010101010101010101010100101111111111101101010101010101010010111111111110110101010100000000000000000",
												"1010101010101010101010100101010101010110101010101010101010011111111111100110101010000000000000000000",
												"1010101010101010101010101010101010101010101010101010101010011111111111011010101010000000000000000000",
												"1010101010101010101010101010101010101010101010101010101010011111111111011010101000000000000000000000",
												"1010101010101010101010101010101010101010101010101010101010010011111111011010101000000000000000000000",
												"0110101010101010101010101010101010101010101010101010101010100101111111010110101000000000000000000000",
												"0010101010101010101010101010101010010101010101101010101010101001111111110110101000000000000000000000",
												"0010101010101010101010101010010101111111111101010110101010101001111111110010101000000000000000000000",
												"0000101010101010101010101010011111111111111111110110101010100110111111010110101000000000000000000000",
												"0000000010101010101010101010011111111111111111011010101010100111111101101010101000000000000000000000",
												"0000000000001010101010101010011111111111111101011010101010101001010110101010101000000000000000000000",
												"0000000000000010101010101010011111111111111101011010101010101010101010101010101000000000000000000000",
												"0000000000000000101010101010010111111111111111011010101010101010101010101010101000000000000000000000",
												"0000000000000000101010101010100111111111111111010110101010101010101010101010101000000000000000000000",
												"0000000000000000001010101010100111111111111111110110101010101010101010101010100100000000000000000000",
												"0000000000000000000110101010101001011111111111010110101010101010101010100110000000000000000000000000",
												"0000000000000000000010101010101010010101111110011010101010101010101010101000000000000000000000000000",
												"0000000000000000000010101010101010101010010101101010101010101010101010100000000000000000000000000000",
												"0000000000000000000000101010101010101010101010101010101010101010101000000000000000000000000000000000",
												"0000000000000000000000001010101010101010101010101010101010101010010000000000000000000000000000000000",
												"0000000000000000000000000000101010101010101010101010101010100000000000000000000000000000000000000000",
												"0000000000000000000000000000000010101010101000000000000000000000000000000000000000000000000000000000",--
												"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
												"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
												"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
												"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
												"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
												"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
												"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
												"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
												"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
												"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
												"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
												"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
												"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
												"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
BEGIN 
	--WRITE PROCESS
   read_process: PROCESS(clk)
	BEGIN 
	   IF (rising_edge(clk)) THEN
			data_reg <= DATA_ROM(to_integer(unsigned(addr)));
		END IF;
	END PROCESS;
	--READ 
	r_data <= data_reg;
 END ARCHITECTURE funtional;